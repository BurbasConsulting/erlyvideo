#!/usr/bin/env escript
%% -*- erlang -*-
-include_lib("xmerl/include/xmerl.hrl").

main([Command, Instance, SecretKey, AccessKeyId]) ->
  code:add_path("apps/rtmp/ebin/"),
  code:add_path("apps/ibrowse/ebin/"),
  application:start(rtmp),
  application:start(inets),
  application:start(xmerl),
  ssl:start(),
  put(access_key_id,AccessKeyId),
  put(secret_key,SecretKey),
  case Command of
    "run"  -> run(Instance);
    "terminate" -> terminate(Instance);
    "state"-> state(Instance);
    "brun" -> brun(Instance);
    "bterminate" -> bterminate(Instance);
    "get_host" -> get_host(Instance)
  end.

get_params(RawParameters) ->
  Parameters = erlang:list_to_binary(RawParameters),
  [begin List=case Param of
      <<"?",Tail/binary>> ->
        Tail;
      Value ->
        Value
  end,
  binary_to_list(<<List/binary,"&">>) 
  end || Param <- binary:split(Parameters,<<"&">>,[global])].  

expires() ->
  {{Y,M,D},{H,Mm,S}} = {erlang:date(),erlang:time()},
  lists:flatten(io_lib:format("~4.10.0B-~2.10.0B-~2.10.0BT~2.10.0B%3A~2.10.0B%3A~2.10.0BZ", [Y, M, D, H, Mm, S])).    

create_sign(Request) ->
  SecretKey=get(secret_key),
  {_Protocol,_,Host,_Port,Path,RawParams} = http_uri:parse(Request),
  RParams = lists:foldl(fun(Param,Acc)-> Acc++Param end,"",lists:sort(get_params(RawParams))),
  {Params,_} = lists:split(erlang:length(RParams)-1, RParams),
  base64:encode_to_string(hmac256:digest_bin(SecretKey,"GET\n"++Host++"\n"++Path++"\n"++Params)).

make_request(Params) ->
  Request = "https://ec2.amazonaws.com/?"++Params++"Version=2011-07-15&SignatureVersion=2&SignatureMethod=HmacSHA256&Expires="++expires()++"&AWSAccessKeyId="++get(access_key_id),
  Signature=create_sign(Request),
  httpc:request(get,{Request++"&Signature="++ibrowse_lib:url_encode(Signature),[]}, [{ssl,[{verify,0}]}], []).

get_element(Element,XML) ->
  lists:keyfind(Element,2,XML#xmlElement.content).

run(AMI) ->
  case make_request("Action=RunInstances&SecurityGroupId=RTMP&KeyName=tthread&ImageId="++AMI++"&InstanceType=m1.large&MinCount=1&MaxCount=1&") of
    {ok,{{_Protocol,_Code,_Status},_Headers,Result}} ->
      {Req,_Misc} = xmerl_scan:string(Result), 
      case get_element('Errors',Req) of
        #xmlElement{} ->
          io:format("\nWe have an error in target request\n");
        _ ->
          InstancesSet = get_element('instancesSet',Req),
          ItemInstances = get_element('item',InstancesSet),
          #xmlElement{content = [Content]} = get_element('instanceId',ItemInstances),
          io:format("Instance ~p is starting...",[Content#xmlText.value]),
          Content#xmlText.value
      end;
     V-> io:format("~p",V)
  end.

state(Instance) ->
  case make_request("Action=DescribeInstances&InstanceId="++Instance++"&") of
   {ok,{{_Protocol,_Code,_Status},_Headers,Result}} ->
      {Req,_Misc} = xmerl_scan:string(Result),
      case get_element('Errors',Req) of
	#xmlElement{}->
	  %io:format("\nErrors\n");
          "problem";
        _ ->
	  ResSet = get_element('reservationSet',Req),
          ItemRes = get_element('item',ResSet),
	  InstancesSet = get_element('instancesSet',ItemRes),
	  ItemInstances = get_element('item',InstancesSet),
          StateSet = get_element('instanceState',ItemInstances),
          #xmlElement{content=[State]} = get_element('name',StateSet),
	  State#xmlText.value
      end;
    _ ->
      ok
  end.

terminate(Instance) ->
  case make_request("Action=TerminateInstances&InstanceId.1="++Instance++"&") of
   {ok,{{_Protocol,_Code,_Status},_Headers,Result}} ->
      {Req,_Misc} = xmerl_scan:string(Result),
      case get_element('Errors',Req) of
	#xmlElement{}->
	  io:format("\nErrors\n");
	_->
	  InstanceSet = get_element('instancesSet',Req),
	  ItemSet = get_element('item',InstanceSet),
	  #xmlElement{content=[Content]} = get_element('instanceId',ItemSet),
	  io:format("\nInstance ~p is terminating...",[Content#xmlText.value])
      end;
    _ ->
      ok
  end.

bterminate(Instance)->
  terminate(Instance),
  Status=wait_status(Instance,"terminated"),
  io:format("\nNow, ~p is terminate. And has ~p status.\n",[Instance,Status]),Status.
  
brun(AMI) ->
  Status=case run(AMI) of
    Instance when is_list(Instance)  ->
      wait_status(Instance,"running")
  end, io:format("\n~p\n",[Status]), Status.

get_host(Instance) ->
  case make_request("Action=DescribeInstances&InstanceId="++Instance++"&") of
   {ok,{{_Protocol,_Code,_Status},_Headers,Result}} ->
      {Req,_Misc} = xmerl_scan:string(Result),
      case get_element('Errors',Req) of
	#xmlElement{}->
	  io:format("\nErrors\n");     
        _ ->
	  ResSet = get_element('reservationSet',Req),
          ItemRes = get_element('item',ResSet),
	  InstancesSet = get_element('instancesSet',ItemRes),
	  ItemInstances = get_element('item',InstancesSet),
	  #xmlElement{content=[#xmlText{value=IpAddress}]} = get_element('ipAddress',ItemInstances),	  
	  io:format("~s",[IpAddress]),
	  IpAddress
      end
  end.

wait_status(Instance,Status) ->
  case state(Instance) of
    Status ->
      {success,Instance,Status};
     _->
      io:format("."),
      wait_status(Instance,Status)
  end.
