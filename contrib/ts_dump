#!/usr/bin/env ERL_LIBS=apps escript


-include_lib("erlmedia/include/video_frame.hrl").

main([Path]) ->
  Root = filename:join(filename:dirname(escript:script_name()), ".."),
  [code:add_pathz(Path_) || Path_ <- filelib:wildcard(Root ++ "/apps/*/ebin")],
  application:start(log4erl),
  ems_log:start(),
  process_flag(trap_exit, true),
  {ok, Reader} = mpegts_file_reader:init([Path, [{consumer, self()}]]),
  T1 = erlang:now(),
  Number = case (catch dump_frames(Reader, 0)) of
    {ok, Num} -> Num;
    _Else -> io:format("~p:~p~n", [_Else, erlang:get_stacktrace()])
  end,
  T2 = erlang:now(),
  io:format("~p frames in ~p s~n", [Number, timer:now_diff(T2, T1) div 1000000]).


dump_frames(_, Count) when Count > 30000 ->
  {ok, Count};

dump_frames(Reader, Count) ->
  case mpegts_file_reader:read_frame(Reader) of
    {_NewReader, undefined} ->
      {ok, Count};
    {NewReader, Frames} ->
      % [dump_frame(Frame) || Frame <- Frames],
      dump_frames(NewReader, Count + length(Frames))
  end.

% dump_frame(#video_frame{flavor = keyframe, codec = h264, dts = DTS, body = Body}) ->
%   io:format("h264(keyframe) ~p(~p): ~p~n", [round(DTS), iolist_size(Body), Body]);
% 
dump_frame(#video_frame{flavor = Flavor, codec = Codec, dts = DTS, body = Body}) ->
  io:format("~p(~p): ~p (~p)~n", [Codec, Flavor, round(DTS), iolist_size(Body)]),
  ok.

