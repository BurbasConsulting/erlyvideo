#!/usr/bin/env escript


-record(state, {
  tracks = []
}).

-record(track, {
  track_id,
  track_number,
  reader,
  buffer = [],
  sample_count,
  total_size,
  offset,
  mvhd,
  sizes,
  stsc,
  stco
}).

-define(D(X), io:format("mp4mux:~p ~p~n", [?LINE, X])).

main([]) ->
  io:format("~s out.mp4 File1@Track1 File@Track2 .. SpecN~n", [escript:script_name()]),
  erlang:halt(1);


% Логика такая:
% 1. собираем спецификацию файлов
% 2. открываем каждый файл
% 3. идем по нему в sax стиле:   atom(AtomName, Content, Context) -> {ok, Context}
% 4. атомы дорожек перебираем только если нужно по спецификации
% 5. заходя в атом дорожки сохраняем в оригинальном виде все атомы кроме stsc и stco. 
% 6. stsz нужно будет прочитать только на вычитывании содержимого дорожки
% 7. добавляем в выходном файле новую дорожку
% 8. пишем её 

% Т.е. нужны следующие функции:
% 1. parse_atom(Reader, InitialState) -> {ok, State}
% 2. 

main([OutPath|Inputs]) ->
  T1 = erlang:now(),
  InputFiles = lists:map(fun(Spec) ->
    [Path, Track] = string:tokens(Spec, "@"),
    TrackId = list_to_integer(Track),
    {ok, F} = file:open(Path, [read, binary]),
    {{file,F}, TrackId}
  end, Inputs),
  
  {ok, Out} = file:open(OutPath, [binary, write, {delayed_write, 2*1024*1024, 3000}]),
  Writer = fun(Bin) ->
    file:write(Out, Bin)
  end,
  
  State = #state{},
  #state{tracks = Tracks} = _State1 = lists:foldl(fun({F, TrackId}, #state{tracks = Tracks_} = State_) ->
    {_T2_, Track} = timer:tc(fun() -> append_track(F, #track{track_id = TrackId, track_number = 1, reader = F}) end),
    ?D({append_track, TrackId, _T2_}),
    State_#state{tracks = Tracks_ ++ [Track]}
  end, State, InputFiles),
  Mp4 = fun([#track{mvhd = MVHD}|_] = Tracks_) ->
    [
      {ftyp, [<<"isom", 512:32>>, [<<"isom", "iso2", "avc1", "mp42">>]]},
      {free, <<>>},
      {moov, [{mvhd,MVHD}] ++ [{trak, Trak} || #track{buffer = Trak} <- Tracks_]}
    ]
  end,
  Buffer1 = mp4_serialize(Mp4(Tracks)),
  DataOffset = iolist_size(Buffer1) + 8,
  T2 = erlang:now(),
  ?D({flush_header, timer:now_diff(T2, T1)}),
  Tracks1 = rewrite_track_offsets(Tracks, DataOffset, []),
  MdatSize = 8 + lists:sum([Size || #track{total_size = Size} <- Tracks1]),
  % ?D(Mp4(Tracks1)),
  Writer(mp4_serialize(Mp4(Tracks1))),
  Writer(<<MdatSize:32, "mdat">>),
  T3 = erlang:now(),
  ?D({flush_moov, timer:now_diff(T3, T2)}),
  [write_track(Writer, Track) || Track <- Tracks1],
  T4 = erlang:now(),
  ?D({finish, timer:now_diff(T4,T3), timer:now_diff(T4,T1)}),
  timer:sleep(50),
  ok.

rewrite_track_offsets([], _, Acc) ->
  lists:reverse(Acc);
rewrite_track_offsets([#track{total_size = Size} = Track|Tracks], Offset, Acc) ->
  rewrite_track_offsets(Tracks, Offset + Size, [rewrite_track_atoms(Track#track{offset = Offset})|Acc]).

rewrite_track_atoms(#track{buffer = Atoms, sample_count = Count, offset = Offset} = Track) ->
  Atoms1 = rewrite_track_atoms(Atoms, Count, Offset, []),
  % ?D(Atoms1),
  Track#track{buffer = Atoms1}.
  
rewrite_track_atoms([], _, _, Acc) ->
  lists:reverse(Acc);
  
rewrite_track_atoms([{stsc, _}|Atoms], Count, Offset, Acc) ->
  % ?D({rewrite,stsc,Count}),
  rewrite_track_atoms(Atoms, Count, Offset, [{stsc, <<0:32, 1:32, 1:32, Count:32, 1:32>>}|Acc]);

rewrite_track_atoms([{stco, _}|Atoms], Count, Offset, Acc) ->
  % ?D({rewrite,stco,Offset}),
  rewrite_track_atoms(Atoms, Count, Offset, [{stco, <<0:32, 1:32, Offset:32>>}|Acc]);
  
rewrite_track_atoms([{Atom, Content}|Atoms], Count, Offset, Acc) when is_list(Content) ->
  Content1 = rewrite_track_atoms(Content, Count, Offset, []),
  rewrite_track_atoms(Atoms, Count, Offset, [{Atom,Content1}|Acc]);

rewrite_track_atoms([Atom|Atoms], Count, Offset, Acc) ->
  rewrite_track_atoms(Atoms, Count, Offset, [Atom|Acc]).

write_track(Writer, #track{reader = Reader, stsc = <<_:32, _EntryCount:32, STSC/binary>>, stco = <<_:32, OffsetCount:32, STCO/binary>>, sizes = Sizes}) ->
  T0 = erlang:now(),
  put(prev_cache_time, undefined),
  ChunkOffsets = [ChunkOffset || <<ChunkOffset:32>> <= STCO],
  {T1, ChunkSizes} = timer:tc(fun()-> expand_chunks([{ChunkId, SamplesPerChunk} || <<ChunkId:32, SamplesPerChunk:32, _SampleId:32>> <= STSC], OffsetCount, []) end),
  Chunks = lists:zipwith(fun(ChunkOffset, SamplesPerChunk) -> {ChunkOffset, SamplesPerChunk} end, ChunkOffsets, ChunkSizes),
  ?D({expand_chunks, T1 div 1000, length(Chunks)}),
  T2 = erlang:now(),
  write_track(Writer, Reader, Sizes, Chunks),
  T3 = erlang:now(),
  ?D({written_track, timer:now_diff(T3,T0)}),
  ok.

expand_chunks([{Chunk1, Samples}, {Chunk2, Samples2}|Chunks], Count, Acc) ->
  expand_chunks([{Chunk2,Samples2}|Chunks], Count, Acc ++ [Samples || _ <- lists:seq(1, Chunk2 - Chunk1)]);

expand_chunks([{Chunk, Samples}], Count, Acc) ->
  Acc ++ [Samples || _ <- lists:seq(0, Count - Chunk)].

write_track(_Writer, _Reader, [], []) ->
  ok;

write_track(Writer, Reader, Sizes, [{Offset,Count}|Chunks]) ->
  {ChunkSize, LeftSizes} = if
    is_number(Sizes) -> {Sizes*Count, Sizes};
    is_list(Sizes) -> {ChunkSizes, AllSizes} = lists:split(Count, Sizes), {lists:sum(ChunkSizes), AllSizes};
    is_binary(Sizes) -> erlang:throw(binary)
  end,
  % ?D({read, length(Chunks), Count, Offset, ChunkSize}),
  {ok, Bin} = cached_pread(Reader, Offset, ChunkSize),
  Writer(Bin),
  write_track(Writer, Reader, LeftSizes, Chunks).

cached_pread(Reader, Offset, ChunkSize) ->
  CachedSize = get(cached_size),
  case get(cached_offset) of
    CachedOffset when CachedOffset =< Offset andalso CachedOffset + CachedSize >= Offset + ChunkSize -> ok;
    _ -> fetch_cache(Reader, Offset, ChunkSize)
  end,
  Bin = get(cached_bin),
  InnerOffset = Offset - get(cached_offset),
  <<_:InnerOffset/binary, Result:ChunkSize/binary, _/binary>> = Bin,
  {ok, Result}.
  
fetch_cache({Module, Device}, Offset, ChunkSize) ->
  CachedSize = ((ChunkSize bsr 20)+16) bsl 20,
  % ?D({ChunkSize, CachedSize}),
  put(cached_offset, Offset),
  put(cached_size, CachedSize),
  case get(prev_cache_time) of undefined -> put(prev_cache_time, erlang:now()); _ -> ok end,
  Delta = timer:now_diff(erlang:now(), get(prev_cache_time)),
  put(prev_cache_time, erlang:now()),
  ?D({pread, Offset, CachedSize, Delta}),
  {ok, Bin} = Module:pread(Device, Offset, CachedSize),
  put(cached_bin, Bin).
      


%% Generic

append_track(Input, State) ->
  Pos = 0,
  mp4_foldl(Input, Pos, State).

mp4_foldl({Module,Device} = Input, Pos, State) ->
  case read_atom_header(Input, Pos) of
    {atom, mdat, NewPos, Size} ->
      State1 = handle_atom(mdat, undefined, State),
      mp4_foldl(Input, NewPos+Size, State1);
    {atom, moov, NewPos, Size} ->
      T1 = erlang:now(),
      {ok, Bin} = Module:pread(Device, NewPos, Size),
      T2 = erlang:now(),
      ?D({pread_moov, timer:now_diff(T2,T1)}),
      State1 = mp4_foldl(Bin, State),
      mp4_foldl(Input, NewPos+Size, State1);
    {atom, Atom, NewPos, Size} ->
      {ok, Bin} = Module:pread(Device, NewPos, Size),
      State1 = handle_atom(Atom, Bin, State),
      mp4_foldl(Input, NewPos+Size, State1);
    eof ->
      State;
    Else ->
      erlang:error(Else)
  end.  

mp4_foldl(<<1:32, AtomName:4/binary, AtomLength:64, Bin/binary>>, State) ->
  Size = AtomLength - 16,
  <<Atom:Size/binary, Rest/binary>> = Bin,
  {T1, State1} = timer:tc(fun() -> handle_atom(binary_to_atom(AtomName, latin1), Atom, State) end),
  ?D({atom, AtomName, T1}),
  mp4_foldl(Rest, State1);

mp4_foldl(<<AtomLength:32, AtomName:4/binary, Bin/binary>>, State) ->
  Size = AtomLength - 8,
  <<Atom:Size/binary, Rest/binary>> = Bin,
  {_T1, State1} = timer:tc(fun() -> handle_atom(binary_to_atom(AtomName, latin1), Atom, State) end),
  % ?D({atom, AtomName, T1}),
  mp4_foldl(Rest, State1);

mp4_foldl(<<>>, State) ->
  State.  

read_atom_header({Module, Device}, Pos) ->
  case Module:pread(Device, Pos, 8) of
    {ok, <<0:32, AtomName/binary>>} ->
      {atom, binary_to_atom(AtomName, latin1), Pos + 8, all_file};
    {ok, <<1:32, AtomName/binary>>} ->
      case Module:pread(Device, Pos+4, 12) of
        {ok, <<AtomName:4/binary, AtomLength:64>>} when AtomLength >= 12 -> 
          {atom, binary_to_atom(AtomName, latin1), Pos + 16, AtomLength - 16};
        eof ->
          eof;
        {ok, Bin} ->
          ?D({invalid_atom, Bin}),
          {error, {invalid_atom, Bin}};
        {error, Error} ->
          {error, Error}
      end;
    {ok, <<AtomLength:32, AtomName/binary>>} when AtomLength >= 8 ->
      {atom, binary_to_atom(AtomName, latin1), Pos + 8, AtomLength - 8};
    eof ->
      eof;
    {ok, Bin} ->
      {error, {invalid_atom, Bin}};
    {error, Error} ->
      {error, Error}
  end.


mp4_serialize(Bin) when is_binary(Bin) ->
  Bin;

mp4_serialize(Number) when is_integer(Number) ->
  <<Number:32>>;

mp4_serialize(List) when is_list(List) ->
  mp4_serialize(List, []);

mp4_serialize({AtomName, Content}) ->
  Bin = iolist_to_binary(mp4_serialize(Content)),
  % ?D({AtomName, size(Bin) + 8}),
  [<<(size(Bin) + 8):32>>, atom_to_binary(AtomName, latin1), Bin].


mp4_serialize([], Acc) ->
  lists:reverse(Acc);

mp4_serialize([Atom|List], Acc) ->
  Bin = mp4_serialize(Atom),
  mp4_serialize(List, [Bin | Acc]).

%% Special

handle_atom(mdat, _Bin, State) ->
  State;

handle_atom(trak, Bin, #track{track_id = TrackId, track_number = TrackId} = State) ->
  #track{buffer = Trak} = State1 = mp4_foldl(Bin, State#track{track_number = TrackId + 1, buffer = []}),
  State1#track{buffer = Trak};
  

handle_atom(trak, _Trak, #track{track_number = TrackNumber} = State) ->
  % ?D({skip_trak, TrackNumber}),
  State#track{track_number = TrackNumber+1};

handle_atom(tkhd, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{tkhd, Bin}]};

handle_atom(mdia, Bin, #track{buffer = Trak} = State) ->
  #track{buffer = Mdia} = State1 = mp4_foldl(Bin, State#track{buffer = []}),
  State1#track{buffer = Trak ++ [{mdia, Mdia}]};

handle_atom(minf, Bin, #track{buffer = Trak} = State) ->
  #track{buffer = Minf} = State1 = mp4_foldl(Bin, State#track{buffer = []}),
  State1#track{buffer = Trak ++ [{minf, Minf}]};

handle_atom(mdhd, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{mdhd, Bin}]};

handle_atom(hdlr, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{hdlr, Bin}]};

handle_atom(mvhd, Bin, #track{} = State) ->
  State#track{mvhd = Bin};

handle_atom(dinf, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{dinf, Bin}]};

handle_atom(stbl, Bin, #track{buffer = Trak} = State) ->
  #track{buffer = Mdia} = State1 = mp4_foldl(Bin, State#track{buffer = []}),
  State1#track{buffer = Trak ++ [{stbl, Mdia}]};

handle_atom(stsd, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{stsd, Bin}]};

handle_atom(stts, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{stts, Bin}]};

handle_atom(stss, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{stss, Bin}]};

handle_atom(ctts, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{ctts, Bin}]};

handle_atom(smhd, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{smhd, Bin}]};

handle_atom(vmhd, Bin, #track{buffer = Trak} = State) ->
  State#track{buffer = Trak ++ [{vmhd, Bin}]};

handle_atom(free, _Bin, State) -> State;
handle_atom(iods, _Bin, State) -> State;
handle_atom(udta, _Bin, State) -> State;
handle_atom(ftyp, _Bin, State) -> State;

handle_atom(stsz, <<_:32, SampleSize:32, SampleCount:32, SampleSizeData/binary>> = Bin, #track{buffer = Trak} = State) ->
  T1 = erlang:now(),
  Sizes = case SampleSize of
    0 -> [Size || <<Size:32>> <= SampleSizeData];
    _ -> SampleSize
  end,
  T2 = erlang:now(),
  TotalSize = case Sizes of
    _ when is_number(Sizes) -> SampleCount*Sizes;
    _ -> lists:sum(Sizes)
  end,
  T3 = erlang:now(),
  ?D({stsz, SampleSize, timer:now_diff(T2, T1), timer:now_diff(T3, T2), SampleCount}),
  % ?D({stsz, SampleCount, TotalSize}),
  State#track{buffer = Trak ++ [{stsz, Bin}], sample_count = SampleCount, total_size = TotalSize, sizes = Sizes};

handle_atom(stsc, Bin, #track{buffer = Trak} = State) ->
  SampleCount = 16#FFFFFFFF,
  State#track{stsc = Bin, buffer = Trak ++ [{stsc, <<0:32, 1:32, 1:32, SampleCount:32, 1:32>>}]};

handle_atom(stco, Bin, #track{buffer = Trak} = State) ->
  ChunkOffset = 16#FFFFFFFF,
  State#track{stco = Bin, buffer = Trak ++ [{stco, <<0:32, 1:32, ChunkOffset:32>>}]};

handle_atom(_Atom, _Bin, State) ->
  % ?D({_Atom, size(_Bin)}),
  State.




























