RTMPClient->rtmp_session: play(video.mp4, [{language:rus}])
rtmp_session->media_provider: play(video.mp4, [{language:rus}])
note right of media_provider: lookup video.mp4 in opened media list
note right of media_provider: if no video.mp4 opened, lookup throught media_detectors for type of new media
media_provider->ems_media_sup: start_media(video.mp4, Options)
ems_media_sup->media_provider: {ok, ems_media}
note right of media_provider: register ems_media as video.mp4
media_provider->ems_media: {subscribe, rtmp_session}
media_provider->rtmp_session: {ok, ems_media}
note right of ems_media: detect file accessor (file or http_file)
ems_media->file: {ok,F} = open(video.mp4)
ems_media->mp4_reader: Format:open({file,F},Options)
ems_media->media_ticker_sup: start_ticker(self(),rtmp_session)
media_ticker_sup->ems_media: {ok,media_ticker}
media_ticker->ems_media: first_frame([{language:rus}])
ems_media->media_ticker: #video_frame{dts=DTS1, next_id = Next} = Frame
media_ticker->rtmp_session: Frame
rtmp_session->rtmp_client: rtmp:encode(Frame)
media_ticker->ems_media: read_frame(Next)
ems_media->media_ticker: #video_frame{dts=DTS2} = Frame2
media_ticker->media_ticker: sleep(DTS2-DTS1)
media_ticker->rtmp_session: Frame2
